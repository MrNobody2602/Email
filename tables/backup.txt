<?php
session_start();

$user_id = $_SESSION['user_id'] ?? null;

if (!$user_id) {
    header("Location: ../login.php");
    exit();
}

include '../connection/conn.php';

$user_profile = [];
if ($user_id) {
    $stmt = $conn->prepare("SELECT * FROM update_profile WHERE user_id = ?");
    $stmt->bind_param("s", $user_id);
    $stmt->execute();
    $result = $stmt->get_result();
    $user_profile = $result->fetch_assoc();
    $stmt->close();
}

if ($_SERVER["REQUEST_METHOD"] == "POST" && $user_id) {
    $username = $_POST['username'];
    $age = $_POST['age'];
    $address = $_POST['address'];
    $birthday = $_POST['birthday'];
    $phone_number = $_POST['phone_number'];

    $image = $user_profile['image'] ?? '';
    if (isset($_FILES['image']) && $_FILES['image']['size'] > 0) {
        $image = $_FILES['image']['name'];
        $target_dir = "../uploads/images/";
        $target_file = $target_dir . basename($image);
        move_uploaded_file($_FILES['image']['tmp_name'], $target_file);
    }

    if ($user_profile) {
        $stmt = $conn->prepare("UPDATE update_profile SET username = ?, age = ?, address = ?, birthday = ?, phone_number = ?, image = ? WHERE user_id = ?");
        $stmt->bind_param("sisssss", $username, $age, $address, $birthday, $phone_number, $image, $user_id);
    } else {
        $stmt = $conn->prepare("INSERT INTO update_profile (user_id, username, age, address, birthday, phone_number, image) VALUES (?, ?, ?, ?, ?, ?, ?)");
        $stmt->bind_param("ssissss", $user_id, $username, $age, $address, $birthday, $phone_number, $image);
    }

    if ($stmt->execute()) {
        // Update the `users` table with the new username
        $update_user_stmt = $conn->prepare("UPDATE users SET username = ? WHERE user_id = ?");
        $update_user_stmt->bind_param("ss", $username, $user_id);
        $update_user_stmt->execute();

        // Update the session data
        $_SESSION['username'] = $username;

        // Pass the success message to JavaScript
        echo "<script>
                var showToastMessage = {
                    success: 'Profile updated successfully!'
                };
              </script>";

        // Redirect after 3 seconds to allow toast to be shown
        echo "<script>
                setTimeout(function() {
                    window.location.href = '../dashboard/?page=inbox';
                }, 3000); 
              </script>";
    } else {
        echo "<script>
        var showToastMessage = {
            error: 'Error updating profile.'
        };
      </script>";
    }

    $stmt->close();
    $conn->close();
}
?>

<?php include('../dashboard/header.php'); ?>

<style>
    /* Loading Screen Styles */
.loading-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    color: white;
}

.spinner {
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top: 4px solid #fff;
    width: 50px;
    height: 50px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

</style>
<!-- Loading Screen HTML -->
<div id="loadingScreen" class="loading-screen">
    <div class="spinner"></div>
    <p>Processing...</p>
</div>

<div class="toast-container">
    <!-- SUCCESS TOAST -->
    <div class="toast valid-toast" id="validMessage" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="3000">
        <i class="fa fa-check-circle-o valid-icon" aria-hidden="true"></i>
        <div class="toast-body valid-toast-body"></div>
    </div>

    <!-- WARNING TOAST -->
    <div class="toast warning-toast" id="warningMessage" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="3000">
        <i class="fa fa-exclamation-triangle warning-icon" aria-hidden="true"></i>
        <div class="toast-body warning-toast-body"></div>
    </div>

    <!-- ERROR TOAST -->
    <div class="toast invalid-toast" id="invalidMessage" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="3000">
        <i class="fa fa-times-circle-o invalid-icon"></i>
        <div class="toast-body invalid-toast-body"></div>
    </div>
</div>

<!-- jQuery -->
<script src="../assets/JQUERY/jquery-3.7.1.min.js"></script>
<!-- Include Bootstrap JS for toasts -->
<script src="../assets/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="../assets/js/updateProfileValidation.js"></script>

<script>
$(document).ready(function() {
    // Show loading screen on form submission
    $('form').on('submit', function() {
        $('#loadingScreen').show();  // Show the loading screen
    });
});
</script>




// INBOX WEBSOCKET
<!-- <script>
        const socket = new WebSocket('ws://localhost:8081/emailing');

        socket.onopen = function(event) {
            console.log("Connected to WebSocket server.");
        };

        socket.onmessage = function(event) {
            const newEmail = JSON.parse(event.data);
            console.log("New message received:", newEmail);

            const noEmailsRow = document.querySelector("#inbox-table tbody tr td[colspan='6']");
            if (noEmailsRow) {
                noEmailsRow.parentElement.remove();
            }

            const table = document.querySelector("#inbox-table tbody");
            const newRow = document.createElement('tr');
            const emailData = JSON.stringify(newEmail);

            newRow.classList.add('view-emailDetails');
            if (!newEmail.read_status) {
                newRow.classList.add('glowing-border');
            }
            newRow.setAttribute('data-email', emailData);

            newRow.innerHTML = `
                <td>${newEmail.sender}</td>
                <td>${newEmail.subject}</td>
                <td class='message-cell'>${newEmail.message}</td>
                <td>${newEmail.created_at}</td>
                <td>${newEmail.read_status ? 'Read' : 'Unread'}</td>
            `;

            table.prepend(newRow);

            newRow.addEventListener("click", function () {
                const dataAttribute = newRow.getAttribute("data-email");
                if (!dataAttribute) {
                    console.error("Missing data-email attribute");
                    return;
                }

                const emailData = JSON.parse(dataAttribute);

                document.getElementById("modal-sender").textContent = emailData.sender_email;
                document.getElementById("modal-subject").textContent = emailData.subject;
                document.getElementById("modal-message").textContent = emailData.message;
                document.getElementById("modal-date").textContent = emailData.created_at;

                // Show the modal
                emailModal.show();

                if (newRow.classList.contains('glowing-border')) {
                    markEmailAsRead(emailData.id, newRow);
                }
            });
        };
        
        socket.onclose = function(event) {
            console.log("Disconnected from WebSocket server.");
        };

        socket.onerror = function(error){
            console.log("Websocket error:", error);
        }
    </script> -->

    //INDE BOTTOM NAVBAR
            <!-- Bottom Navigation Bar -->
<nav class="bottom-navbar">
    <a href="?page=compose" class="nav-item <?php echo (isset($_GET['page']) && $_GET['page'] === 'compose') ? 'active' : ''; ?>">
        <i class="fa-solid fa-pen"></i>
        <span>Compose</span>
    </a>
    <a href="?page=inbox" class="nav-item <?php echo (!isset($_GET['page']) || $_GET['page'] === 'inbox') ? 'active' : ''; ?>">
        <i class="fa-solid fa-inbox"></i>
        <span>Inbox</span>
    </a>
    <a href="?page=sent" class="nav-item <?php echo (isset($_GET['page']) && $_GET['page'] === 'sent') ? 'active' : ''; ?>">
        <i class="fa-solid fa-paper-plane"></i>
        <span>Sent</span>
    </a>
    <a href="?page=drafts" class="nav-item <?php echo (isset($_GET['page']) && $_GET['page'] === 'drafts') ? 'active' : ''; ?>">
        <i class="fa-solid fa-file-alt"></i>
        <span>Drafts</span>
    </a>
    <a href="?page=trash" class="nav-item <?php echo (isset($_GET['page']) && $_GET['page'] === 'trash') ? 'active' : ''; ?>">
        <i class="fa-solid fa-trash"></i>
        <span>Trash</span>
    </a>
</nav>

<style>
/* Fancy Glassmorphic Bottom Navbar */
.bottom-navbar {
    position: fixed;
    bottom: 15px;
    left: 50%;
    transform: translateX(-50%);
    width: 90%;
    max-width: 600px;
    background: rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 30px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
    z-index: 1000;
    transition: all 0.3s ease;
}

.bottom-navbar:hover {
    transform: translateX(-50%) scale(1.02);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
}

.nav-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: #ffffff;
    text-decoration: none;
    font-size: 14px;
    flex: 1;
    transition: all 0.3s ease;
    padding: 10px 0;
}

.nav-item i {
    font-size: 22px;
    margin-bottom: 5px;
    transition: color 0.3s ease, transform 0.3s ease;
}

.nav-item span {
    font-size: 12px;
    color: inherit;
    transition: color 0.3s ease;
}

.nav-item:hover {
    color: #4A90E2;
    transform: translateY(-5px);
}

.nav-item:hover i {
    color: #4A90E2;
    transform: scale(1.2);
}

.nav-item.active {
    color: #4A90E2;
    font-weight: bold;
}

.nav-item.active i {
    color: #4A90E2;
    font-size: 24px;
}

/* Mobile-Friendly Adjustments */
@media (max-width: 480px) {
    .bottom-navbar {
        padding: 8px 15px;
    }

    .nav-item i {
        font-size: 20px;
    }

    .nav-item span {
        font-size: 10px;
    }
}
</style>

index css
/* .edit-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgba(0, 0, 0, 0.6);
  border-radius: 50%;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 18px;
  cursor: pointer;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.profile-container:hover .edit-overlay {
  opacity: 1;
} */


<?php 
                        if ($email_result->num_rows > 0) {
                            while ($email_row = $email_result->fetch_assoc()) {
                                $emailData = htmlspecialchars(json_encode($email_row));
                                $glowClass = $email_row['read_status'] ? '' : 'glowing-border';
                                echo "<tr class='view-emailDetails $glowClass' data-email='$emailData'>
                                        <td>" . htmlspecialchars($email_row['sender_email']) . "</td>
                                        <td>" . htmlspecialchars($email_row['subject']) . "</td>
                                        <td class='message-cell'>" . htmlspecialchars($email_row['message']) . "</td>
                                        <td>" . htmlspecialchars($email_row['created_at']) . "</td>
                                        <td>" . ($email_row['read_status'] ? 'Read' : 'Unread') . "</td>
                                    </tr>";
                            }
                        } else {
                            echo "<tr><td colspan='6'>No emails found for this recipient.</td></tr>";
                        }

                        $email_stmt->close();
                    ?>

                    /* Table Wrapper with Glassmorphism */
.table-wrapper {
  border-radius: 16px;
  overflow: hidden;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  margin: 20px auto;
  width: 100%;
  max-width: 1200px;
  transition: all 0.3s ease;
}

/* Table Responsiveness */
.table-responsive {
  max-height: 300px;
  overflow-y: auto;
}

/* Table Design */
.table {
  width: 100%;
  border-collapse: collapse;
  margin: 0;
}

.table thead th {
  background: rgba(0, 123, 255, 0.8);
  color: white;
  font-weight: bold;
  padding: 15px;
  position: sticky;
  top: 0;
  z-index: 10;
}

.table tbody tr {
  transition: background-color 0.2s ease-in-out;
}

.table tbody tr:hover {
  background: var(--darker);
}

.table td,
.table th {
  padding: 12px;
  text-align: left;
  vertical-align: middle;
  color: var(--darker);
  word-wrap: break-word;
}

.table td.message-cell {
  max-width: 300px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

/* Glowing Border for Unread Messages */
.glowing-border {
  animation: glow 5s ease-in-out infinite alternate;
  border: 2px solid rgba(0, 255, 0, 0.5); /* Glowing green border */
  border-radius: 10px;
}

@keyframes glow {
  from {
    box-shadow: 0 0 5px rgba(0, 255, 0, 0.5);
  }
  to {
    box-shadow: 0 0 15px rgba(0, 255, 0, 0.8);
  }
}

/* Scrollbar Styling */
::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.1);
}

::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.3);
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.5);
}

/* Responsive Behavior */
@media (max-width: 768px) {
  .table-wrapper {
    margin: 10px 0 0;
    border-radius: 12px;
  }

  .table thead th,
  .table td {
    padding: 10px;
    font-size: 14px;
  }

  .table td.message-cell {
    max-width: 200px;
  }

  ::-webkit-scrollbar {
   display: none;
  }
  
  ::-webkit-scrollbar-track {
    display: none;
  }
  
  ::-webkit-scrollbar-thumb {
    display: none;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    display: none;
  }
}

@media (max-width: 576px) {
  .table-wrapper {
    border-radius: 8px;
  }

  .table thead th,
  .table td {
    font-size: 12px;
    padding: 8px;
  }

  .table td.message-cell {
    max-width: 150px; /* Further adjustment for very small screens */
  }
}
<?php 
                            if ($email_result->num_rows > 0) {
                                while ($email_row = $email_result->fetch_assoc()) {
                                    $emailData = htmlspecialchars(json_encode($email_row));
                                    echo "<tr class='view-emailDetails' data-email='$emailData'>
                                            <td>" . htmlspecialchars($email_row['recipient_email']) . "</td>
                                            <td>" . htmlspecialchars($email_row['subject']) . "</td>
                                            <td class='message-cell'>" . htmlspecialchars($email_row['message']) . "</td>
                                            <td>" . htmlspecialchars($email_row['created_at']) . "</td>
                                            <td>" . ($email_row['read_status'] ? 'Read' : 'Unread') . "</td>
                                        </tr>";
                                }
                            } else {
                                echo "<tr><td colspan='5'>No sent emails found.</td></tr>";
                            }

                            $email_stmt->close();
                        ?>

RESTORE
// restore.php
<?php
session_start();
if (!isset($_SESSION['user_id'])) {
    header("Location: ../login.php");
    exit();
}

include '../connection/conn.php';

$message_id = $_GET['id'];  // message_id to restore
$user_id = $_SESSION['user_id'];

// Fetch email details from the trash table
$query = "SELECT * FROM trash WHERE message_id = ?";
$stmt = $conn->prepare($query);
$stmt->bind_param("i", $message_id);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows > 0) {
    $email = $result->fetch_assoc();

    // Insert email back into the emails table
    $insert_query = "INSERT INTO emails (id, sender_email, recipient_email, subject, message, created_at, read_status)
                     VALUES (?, ?, ?, ?, ?, ?, ?)";
    $insert_stmt = $conn->prepare($insert_query);
    $insert_stmt->bind_param("isssssi", $email['message_id'], $email['sender_email'], $email['recipient_email'], $email['subject'], $email['message'], $email['created_at'], $email['read_status']);
    $insert_stmt->execute();

    // Delete the email from the trash table
    $delete_query = "DELETE FROM trash WHERE message_id = ?";
    $delete_stmt = $conn->prepare($delete_query);
    $delete_stmt->bind_param("i", $message_id);
    $delete_stmt->execute();

    $conn->close();
    header("Location: trash.php"); // Redirect to trash page or inbox
} else {
    echo "Email not found in trash.";
}
?>
